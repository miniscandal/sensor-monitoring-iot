✰
Inport order

hooks
types
core
shered
constants

✰
Convertir el formato json recivido de python a un formato de javascript, ejemplo
de {pokemon_name: "chikorita" } a {pokemonName: "chikorita"}

✰
Replantear si core deberia ir en shared

✰
Ideas para mejoras futuras:

Implementar un servicio de seguimiento de errores, como Sentry o LogRocket, podría
ayudar a identificar y solucionar problemas de manera más eficiente.

Un sistema de registro más robusto podría proporcionar información valiosa
sobre el comportamiento de la aplicación en tiempo real y ayudar a identificar
áreas de mejora.

/** ************************************************************************ **/

           __-----_.                        ________
          /  \      \           o  O  O   _(        )__
         /    |  |   \_---_   o._.      _(             )_
        |     |            \   | |""""(_   Hello World!  )
        |     |             |@ | |    (_               _)
         \___/   ___       /   | |      (__          _)
           \____(____\___/     | |         (________)
           |__|                | |          |
           /   \-_             | |         |'
         /      \_ "__ _       !_!--v---v--"
        /         "|  |>)      |""""""""|
       |          _|  | ._--""||        |
       _\_____________|_|_____||________|_
      /                                   \
     /_____________________________________\
     /                                     \
    /_______________________________________\
    /                                       \
   /_________________________________________\
        {                               }
        <_______________________________|
        |                               >
        {_______________________________|               ________
        <                               }              / MINIMI \
        |_______________________________|             /__________\
\|/       \\/             \||//           |//                       \|/    |/

/** ************************************************************************ **/


import mqtt from 'mqtt';

import { ObserverType } from './types/observer';
import { PublicMessageToDeviceType } from './types/publish-message-to-device';
import { ObserverDataType } from './types/observer-data';
import { MqttClientPropertiesType } from './types/mqtt-client-properties';
import { ReceivedMessageByDevice } from './types/received-message-by-device';

import { OBS_ID_MQTT_CLIENT_PROPS } from '@shared-custom-hooks/use-mqtt-client-properties/constants/observer-id';
import { DEVICE_STATUS_CODE } from '@shared-constants/mqttt-client-status-codes';
import { OBS_ID_CONNECTED_DEVICE } from '@shared-custom-hooks/use-connected-device/constants/observer-id';

class MqttClient {
    private client: mqtt.MqttClient;
    private envPrivateTopic: string = import.meta.env.VITE_MQTT_PRIVATE_TOPIC;

    constructor(client: mqtt.MqttClient) {
        this.client = client;
    }

    getClient() {
        return this.client;
    }

    getEnvPrivateTopic() {
        return this.envPrivateTopic;
    }
}

class MqttClientSingleton {
    static instance: MqttClientSingleton;

    private mqttClient: MqttClient;
    private observers: ObserverType[] = [];
    private subscribePriveTopic: boolean = false;

    constructor(mqttClient: MqttClient) {
        if (MqttClientSingleton.instance) {
            return MqttClientSingleton.instance;
        }

        this.mqttClient = mqttClient;
        this.onConnect = this.onConnect.bind(this);
        this.onMessage = this.onMessage.bind(this);
        this.onReconnect = this.onReconnect.bind(this);
        this.configureClient();
    }

    static getInstance() {
        if (!MqttClientSingleton.instance) {
            const mqttConnect = mqtt.connect(import.meta.env.VITE_MQTT_BROKER);
            const mqttClient = new MqttClient(mqttConnect);
            MqttClientSingleton.instance = new MqttClientSingleton(mqttClient);
        }

        return MqttClientSingleton.instance;
    }

    protected observerNotify(observerId: string, data: ObserverDataType) {
        this.observers.forEach(observer => observer(observerId, data));
    }

    protected getClientProperties(): MqttClientPropertiesType {
        const { connected, options } = this.mqttClient.getClient();
        const { clientId, host, port, protocol } = options;

        return {
            clientMqtt: connected ? 'Connected' : undefined,
            clientId,
            host,
            port,
            protocol,
            subscribe: this.subscribePriveTopic ? this.mqttClient.getEnvPrivateTopic() : undefined,
            connected,
        };
    }

    // ... Rest of the code remains the same ...
}

export { MqttClientSingleton };
